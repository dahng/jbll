-- P1 CREATE PROCEDURE

-- 1)
CREATE OR REPLACE PROCEDURE DEPT_INFO(
    V_DEPT_ID DEPARTMENTS.DEPARTMENT_ID%TYPE,
    V_INFO OUT DEPARTMENTS%ROWTYPE)
IS
BEGIN
    SELECT * INTO V_INFO FROM DEPARTMENTS
        WHERE DEPARTMENT_ID = V_DEPT_ID;
    DBMS_OUTPUT.PUT_LINE('DEPARTMENT NAME: ' || V_INFO.DEPARTMENT_NAME);
    DBMS_OUTPUT.PUT_LINE('MANAGER ID: ' || V_INFO.MANAGER_ID);
    DBMS_OUTPUT.PUT_LINE('LOCATION ID: ' || V_INFO.LOCATION_ID);
EXCEPTION WHEN NO_DATA_FOUND THEN  
    DBMS_OUTPUT.PUT_LINE('DEPARTMENT NOT FOUND');
END DEPT_INFO;

-- 2)
CREATE OR REPLACE PROCEDURE ADD_JOB(
    V_JOB_ID    JOBS.JOB_ID%TYPE,
    V_JOB_TITLE JOBS.JOB_TITLE%TYPE)
IS
    V_CID       JOBS.JOB_ID%TYPE;
    V_MATCH_ID  EXCEPTION;
BEGIN
    SELECT JOB_ID INTO V_CID FROM JOBS
        WHERE V_JOB_ID = JOB_ID;
    IF V_CID IS NOT NULL THEN
        RAISE V_MATCH_ID;
    END IF;
EXCEPTION
    WHEN V_MATCH_ID THEN
        DBMS_OUTPUT.PUT_LINE('JOB ID ALREADY EXISTS');
    WHEN NO_DATA_FOUND THEN
        INSERT INTO JOBS VALUES (V_JOB_ID, V_JOB_TITLE, NULL, NULL);
        DBMS_OUTPUT.PUT_LINE('ADDED JOB SUCCESSFULLY');
END;

-- 3)
CREATE OR REPLACE PROCEDURE UPDATE_COMM(V_EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE)
IS
    V_CID       EMPLOYEES.EMPLOYEE_ID%TYPE;
BEGIN
    SELECT EMPLOYEE_ID INTO V_CID FROM EMPLOYEES
        WHERE V_EMP_ID = JOB_ID;
    UPDATE EMPLOYEES
        SET COMMISSION_PCT = COMMISSION_PCT * 1.05
        WHERE V_EMP_ID = EMPLOYEE_ID;
    DBMS_OUTPUT.PUT_LINE('UPDATE COMMISSION SUCCESSFULLY');    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('INVALID EMPLOYEE ID');
END;
-- 4)
CREATE OR REPLACE PROCEDURE ADD_EMP(
    V_EMP_ID        EMPLOYEES.EMPLOYEE_ID%TYPE,
    V_FNAME         EMPLOYEES.FIRST_NAME%TYPE,
    V_LNAME         EMPLOYEES.LAST_NAME%TYPE,
    V_EMAIL         EMPLOYEES.EMAIL%TYPE,
    V_PHONE_NUMBER  EMPLOYEES.PHONE_NUMBER%TYPE,
    V_FIRE_DATE     EMPLOYEES.HIRE_DATE%TYPE,
    V_JOB_ID        EMPLOYEES.JOB_ID%TYPE,
    V_SALARY        EMPLOYEES.SALARY%TYPE,
    V_CMS_PCT       EMPLOYEES.COMMISSION_PCT%TYPE,
    V_MANAGER_ID    EMPLOYEES.MANAGER_ID%TYPE,
    V_DEPT_ID       EMPLOYEES.DEPARTMENT_ID%TYPE)
IS
    V_CID           EMPLOYEES.EMPLOYEE_ID%TYPE;
    V_MATCH_ID      EXCEPTION;
BEGIN
    SELECT EMPLOYEE_ID INTO V_CID FROM EMPLOYEES
        WHERE V_EMP_ID = EMPLOYEE_ID;
    IF V_CID IS NOT NULL THEN
        RAISE V_MATCH_ID;
    ELSE
        INSERT INTO EMPLOYEES VALUES(
            V_EMP_ID,
            V_FNAME,
            V_LNAME,
            V_EMAIL,
            V_PHONE_NUMBER,
            V_FIRE_DATE,
            V_JOB_ID,
            V_SALARY,
            V_CMS_PCT,
            V_MANAGER_ID,
            V_DEPT_ID
        );
        DBMS_OUTPUT.PUT_LINE('ADDED EMPLOYEE SUCCESSFULLY');
    END IF;
EXCEPTION
    WHEN V_MATCH_ID THEN
        DBMS_OUTPUT.PUT_LINE('INVALID EMPLOYEE ID');
END;

-- 5)
CREATE OR REPLACE PROCEDURE DELETE_EMP(V_EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE)
IS
    V_CID           EMPLOYEES.EMPLOYEE_ID%TYPE;
BEGIN
    SELECT EMPLOYEE_ID INTO V_CID FROM EMPLOYEES
        WHERE V_EMP_ID = EMPLOYEE_ID;
    DELETE FROM EMPLOYEES WHERE V_EMP_ID = EMPLOYEE_ID;
    DBMS_OUTPUT.PUT_LINE('DELETE EMPLOYEE SUCCESSFULLY');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('INVALID EMPLOYEE ID');
END;

-- 6)
CREATE OR REPLACE PROCEDURE FIND_EMP
IS
    V_EMP_ID        EMPLOYEES.EMPLOYEE_ID%TYPE;
    V_FIRST_NAME    EMPLOYEES.FIRST_NAME%TYPE;
    V_LAST_NAME     EMPLOYEES.LAST_NAME%TYPE;
    CURSOR CUR_EMP
    IS
        SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME FROM EMPLOYEES E
        WHERE
            SALARY > (SELECT MIN_SALARY FROM JOBS J1
                      WHERE E.JOB_ID = J1.JOB_ID)
            AND
            SALARY < (SELECT MAX_SALARY FROM JOBS J2
                      WHERE E.JOB_ID = J2.JOB_ID);
BEGIN
    FOR EMP IN CUR_EMP
    LOOP
        V_EMP_ID    := EMP.EMPLOYEE_ID;
        V_FIRST_NAME:= EMP.FIRST_NAME;
        V_LAST_NAME := EMP.LAST_NAME;
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE ID: ' || V_EMP_ID);
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE NAME: ' || V_FIRST_NAME || ' ' || V_LAST_NAME);
    END LOOP;
END;

-- 7)
CREATE OR REPLACE PROCEDURE UPDATE_COMM
IS
    V_WORKTIME      VARCHAR2(2);
    V_RAISE         EMPLOYEES.SALARY%TYPE;
    CURSOR CUR_EMP
    IS
        SELECT * FROM EMPLOYEES;
BEGIN
    FOR EMP IN CUR_EMP
    LOOP
        V_WORKTIME := TO_CHAR(SYSDATE, 'YYYY') - TO_CHAR(EMP.HIRE_DATE, 'YYYY');
        IF V_WORKTIME >= 2 THEN
            V_RAISE := 200;
        ELSIF V_WORKTIME > 1 THEN
            V_RAISE := 100;
        ELSIF V_WORKTIME = 1 THEN
            V_RAISE := 50;
        ELSE
            V_RAISE := 0;
        END IF;
        UPDATE EMPLOYEES
            SET SALARY = SALARY + V_RAISE
            WHERE EMP.EMPLOYEE_ID = EMPLOYEE_ID;
        DBMS_OUTPUT.PUT_LINE(EMP.EMPLOYEE_ID || ' SALARY RAISED BY ' || V_RAISE);
    END LOOP;
END;

-- 8)
CREATE OR REPLACE PROCEDURE JOB_HIS(
    V_EMP_ID JOB_HISTORY.EMPLOYEE_ID%TYPE,
    V_INFO OUT JOB_HISTORY%ROWTYPE)
IS
BEGIN
    SELECT * INTO V_INFO FROM JOB_HISTORY
        WHERE EMPLOYEE_ID = V_EMP_ID;
    DBMS_OUTPUT.PUT_LINE('START DATE :' || V_INFO.START_DATE);
    DBMS_OUTPUT.PUT_LINE('END_ DATE: ' || V_INFO.END_DATE);
EXCEPTION WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE ID NOT FOUND');
END JOB_HIS;

-- P2 CREATE FUNCTION

-- 1)
CREATE OR REPLACE FUNCTION SUM_SALARY(V_DEPT_ID IN EMPLOYEES.DEPARTMENT_ID%TYPE)
RETURN EMPLOYEES.SALARY%TYPE
IS
    V_SSALARY       EMPLOYEES.SALARY%TYPE;
BEGIN
    SELECT SUM(SALARY) INTO V_SSALARY FROM EMPLOYEES
        WHERE V_DEPT_ID = DEPARTMENT_ID;
    RETURN V_SSALARY;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'DEPARTMENT NOT FOUND';
END;

-- 2)
CREATE OR REPLACE FUNCTION NAME_CON(
    V_COUNTRY_ID        COUNTRIES.COUNTRY_ID%TYPE)
RETURN COUNTRIES.COUNTRY_NAME%TYPE
IS
    V_COUNTRY_NAME      COUNTRIES.COUNTRY_NAME%TYPE;
BEGIN
    SELECT COUNTRY_NAME INTO V_COUNTRY_NAME FROM COUNTRIES
        WHERE V_COUNTRY_ID = COUNTRY_ID;
EXCEPTION     
    WHEN NO_DATA_FOUND THEN
        RETURN 'COUNTRY NOT FOUND';
END;

-- 3)
CREATE OR REPLACE FUNCTION ANNUAL_COMP(
        V_SALARY        EMPLOYEES.SALARY%TYPE,
        V_CMS_PCT       EMPLOYEES.COMMISSION_PCT%TYPE)
RETURN EMPLOYEES.SALARY%TYPE        
IS
    V_INCOME        EMPLOYEES.SALARY%TYPE;
BEGIN
    V_INCOME := V_SALARY * 12 + (V_CMS_PCT * V_SALARY * 12);
    RETURN V_INCOME;
END;

-- 4)
CREATE OR REPLACE FUNCTION AVG_SALARY(
    V_DEPT_ID       EMPLOYEES.DEPARTMENT_ID%TYPE)
RETURN EMPLOYEES.SALARY%TYPE
IS
    V_AVG EMPLOYEES.SALARY%TYPE;
BEGIN
    SELECT AVG(SALARY) INTO V_AVG FROM EMPLOYEES
        WHERE V_DEPT_ID = DEPARTMENT_ID;
    RETURN V_AVG;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'NO DEPARTMENT FOUND';
END;

-- 5)
CREATE OR REPLACE FUNCTION TIME_WORK(
    V_EMP_ID        EMPLOYEES.EMPLOYEE_ID%TYPE)
RETURN NUMBER
IS
    V_WORKTIME NUMBER;
BEGIN
    SELECT ROUND(MONTHS_BETWEEN(
        TO_DATE(SYSDATE, 'DD/MM/YYYY'), TO_DATE(HIRE_DATE, 'DD/MM/YYYY')), 1)
        INTO V_WORKTIME FROM EMPLOYEES
        WHERE V_EMP_ID = EMPLOYEE_ID;
    RETURN V_WORKTIME;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'EMPLOYEE NOT FOUND';
END;

-- P3 CREATE TRIGGER

-- 1)
CREATE OR REPLACE TRIGGER BM_HIRE_DATE
AFTER INSERT OR UPDATE ON EMPLOYEES
FOR EACH ROW
ENABLE
DECLARE
    V_HIRE_DATE EMPLOYEES.HIRE_DATE%TYPE;
BEGIN
    IF (V_HIRE_DATE > SYSDATE) THEN
        RAISE_APPLICATION_ERROR(-20010, 'INVALID HIRE DATE');
    END IF;    
END;

-- 2)
CREATE OR REPLACE TRIGGER BM_SALARY
AFTER INSERT OR UPDATE ON JOBS
FOR EACH ROW
ENABLE
BEGIN
    IF(:NEW.MIN_SALARY > :NEW.MAX_SALARY) THEN
        RAISE_APPLICATION_ERROR(-20010, 'INVALID SALARY RANGE');
    END IF;
END;

-- 3)
CREATE OR REPLACE TRIGGER BM_DATE
BEFORE INSERT OR UPDATE ON JOB_HISTORY
FOR EACH ROW
ENABLE
BEGIN
    IF(:NEW.START_DATE > :NEW.END_DATE) THEN
        RAISE_APPLICATION_ERROR(-20010, 'INVALID DATE RANGE');
    END IF;    
END;

-- 4)
CREATE OR REPLACE TRIGGER BU_CMS_PCT
BEFORE UPDATE ON EMPLOYEES
FOR EACH ROW
ENABLE
BEGIN
    IF (:NEW.SALARY < :OLD.SALARY) THEN
        RAISE_APPLICATION_ERROR(-20010, 'INVALID SALARY UPDATE');
    ELSIF (:NEW.COMMISSION_PCT < :OLD.COMMISSION_PCT) THEN
        RAISE_APPLICATION_ERROR(-20011, 'INVALID COMMISSION UPDATE');
    END IF;    
END;
