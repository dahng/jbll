-- ------------------------------------------------------------------------------
-- Task 1 Write queries to create entities
-- 1.1 Creating entities
--
-- ------------------------------------------------------------------------------
CREATE  TABLE CAMPUS(
    CAMPUS_ID           VARCHAR2(5)      NOT NULL,
    CAMPUS_NAME         VARCHAR2(100),
    STREET              VARCHAR2(100),
    CITY                VARCHAR2(100),
    STATE               VARCHAR2(100),
    ZIP                 VARCHAR2(100),
    PHONE               VARCHAR2(100),
    CAMPUS_DISCOUNT     DECIMAL(2, 2),
    CONSTRAINT  CAMPUS_PK   PRIMARY KEY (Campus_ID)
);
CREATE  SEQUENCE CAMPUS_SEQ
    START WITH 1
    INCREMENT BY 1;

CREATE  TABLE POSITION(
    POSITION_ID         VARCHAR2(5)     NOT NULL,
    POSITION            VARCHAR2(100),
    YEARLY_MEMBERSHIP_FEE  DECIMAL(7, 2),
    CONSTRAINT  POSITION_PK PRIMARY KEY (POSITION_ID)
);
CREATE  SEQUENCE POSITION_SEQ
    START WITH 1
    INCREMENT BY 1;

CREATE  TABLE MEMBERS(
    MEMBER_ID           VARCHAR2(5)     NOT NULL,
    LAST_NAME           VARCHAR2(100),
    FIRST_NAME          VARCHAR2(100),
    CAMPUS_ADDRESS      VARCHAR2(100),
    CAMPUS_PHONE        VARCHAR2(100),
    CAMPUS_ID           VARCHAR2(5),
    POSITION_ID         VARCHAR2(5 ),
    CONTRACT_DURATION   INTEGER,
    CONSTRAINT  MEMBERS_PK  PRIMARY KEY (MEMBER_ID)
);
ALTER TABLE MEMBERS ADD CONSTRAINT  FK_MEMBERS  FOREIGN KEY (POSITION_ID) 
    REFERENCES POSITION(POSITION_ID);
CREATE  INDEX MEMBERS_POSITION_IDX ON MEMBERS(POSITION_ID);
CREATE  SEQUENCE MEMBERS_SEQ
    START WITH 1
    INCREMENT BY 1;

CREATE  TABLE PRICES(
    FOOD_ITEM_TYPE_ID   NUMBER(20)      NOT NULL,
    MEAL_TYPE           VARCHAR2(100),
    MEAL_PRICE          DECIMAL(7,2),
    CONSTRAINT  PRICES_PK PRIMARY KEY (FOOD_ITEM_TYPE_ID)
);
CREATE  SEQUENCE PRICES_SEQ
    START WITH 1
    INCREMENT BY 1;

CREATE  TABLE FOOD_ITEMS(
    FOOD_ITEM_ID        VARCHAR2(5),
    FOOD_ITEM_NAME      VARCHAR2(100),
    FOOD_ITEM_TYPE_ID   NUMBER(20),
    CONSTRAINT  FOOD_ITEMS_PK PRIMARY KEY (FOOD_ITEM_ID)
);
ALTER TABLE FOOD_ITEMS ADD CONSTRAINT  FK_FOOD_ITEMS FOREIGN KEY (FOOD_ITEM_TYPE_ID)
    REFERENCES PRICES(FOOD_ITEM_TYPE_ID);
CREATE  INDEX FOOD_ITEMS_TYPE_IDX ON FOOD_ITEMS(FOOD_ITEM_TYPE_ID);
CREATE  SEQUENCE FOOD_ITEMS_SEQ
    START WITH 1
    INCREMENT BY 1;

CREATE  TABLE ORDERS(
    ORDER_ID            VARCHAR2(5)     NOT NULL,
    MEMBER_ID           VARCHAR2(5)     NOT NULL,
    ORDER_DATE          VARCHAR2(25),
    CONSTRAINT  ORDERS_PK   PRIMARY KEY (ORDER_ID)
);
ALTER TABLE ORDERS ADD CONSTRAINT  FK_ORDERS   FOREIGN KEY (MEMBER_ID)
    REFERENCES MEMBERS(MEMBER_ID);
CREATE  INDEX ORDERS_MEMBER_IDX ON ORDERS(MEMBER_ID);
CREATE  SEQUENCE ORDERS_SEQ
    START WITH 1
    INCREMENT BY 1;

CREATE  TABLE ORDER_LINE(
    ORDER_ID            VARCHAR2(5)     NOT NULL,
    FOOD_ITEM_ID        VARCHAR2(5)     NOT NULL,
    QUANTITY            INTEGER,
    CONSTRAINT  OL_PK  PRIMARY KEY (FOOD_ITEM_ID, ORDER_ID)
);
ALTER TABLE ORDER_LINE ADD CONSTRAINT FK_OLO FOREIGN KEY (ORDER_ID)
    REFERENCES ORDERS(ORDER_ID);
ALTER TABLE ORDER_LINE ADD CONSTRAINT FK_OLF FOREIGN KEY (FOOD_ITEM_ID)
    REFERENCES FOOD_ITEMS(FOOD_ITEM_ID);
CREATE  INDEX ORDER_LINE_ORDER_IDX ON ORDER_LINE(ORDER_ID);
CREATE  INDEX ORDER_LINE_FITEM_IDX ON ORDER_LINE(FOOD_ITEM_ID);
CREATE  SEQUENCE ORDER_LINE_SEQ
    START WITH 1
    INCREMENT BY 1;
-- ------------------------------------------------------------------------------
-- Task 1 Write queries to create entities
-- 1.2 Creating Prices_Food_Item_ID_SEQ by default values
--
-- ------------------------------------------------------------------------------
CREATE  SEQUENCE PRICE_FOOD_ITEM_ID_SEQ;

-- ------------------------------------------------------------------------------
-- Task 2 Write queries to insert data
--
--
-- ------------------------------------------------------------------------------
-- FEEDING CAMPUS
INSERT  INTO CAMPUS VALUES(CAMPUS_SEQ.NEXTVAL, 'IUPUI', '425 University Blvd.', 'Indianapolis', 'IN', '46202', '317-274-4591', .08);
INSERT  INTO CAMPUS VALUES(CAMPUS_SEQ.NEXTVAL, 'Indiana University', '107 S. Indiana Ave.', 'Bloomington', 'IN', '47405', '812-855-4848', .07);
INSERT  INTO CAMPUS VALUES(CAMPUS_SEQ.NEXTVAL, 'Purdue University', '475 Stadium Mall Drive', 'West Lafayette', 'IN', '47907', '765-494-1776', .06);

-- FEEDING POSITION
INSERT  INTO POSITION VALUES(POSITION_SEQ.NEXTVAL,'Lecturer', 1050.50);
INSERT  INTO POSITION VALUES(POSITION_SEQ.NEXTVAL,'Associate Professor', 900.50);
INSERT  INTO POSITION VALUES(POSITION_SEQ.NEXTVAL,'Assistant Professor', 875.50);
INSERT  INTO POSITION VALUES(POSITION_SEQ.NEXTVAL,'Professor', 700.75);
INSERT  INTO POSITION VALUES(POSITION_SEQ.NEXTVAL,'Full Professor', 500.50);

-- FEEDING MEMBERS
INSERT  INTO MEMBERS VALUES(MEMBERS_SEQ.NEXTVAL, 'Ellen', 'Monk', '009 Purnell', '812-123-1234', '2', '5', 12);
INSERT  INTO MEMBERS VALUES(MEMBERS_SEQ.NEXTVAL, 'Joe', 'Brady', '008 Statford Hall', '765-234-2345', '3', '2', 10);
INSERT  INTO MEMBERS VALUES(MEMBERS_SEQ.NEXTVAL, 'Dave', 'Davidson', '007 Purnell', '812-345-3456', '2', '3', 10);
INSERT  INTO MEMBERS VALUES(MEMBERS_SEQ.NEXTVAL, 'Sebastian', 'Cole', '210 Rutherford Hall', '765-234-2345', '3', '5', 10);
INSERT  INTO MEMBERS VALUES(MEMBERS_SEQ.NEXTVAL, 'Michael', 'Doo', '66C Peobody', '812-548-8956', '2', '1', 10);
INSERT  INTO MEMBERS VALUES(MEMBERS_SEQ.NEXTVAL, 'Jerome', 'Clark', 'SL 220', '317-274-9766', '1', '1', 12);
INSERT  INTO MEMBERS VALUES(MEMBERS_SEQ.NEXTVAL, 'Bob', 'House', 'ET 329', '317-278-9098', '1', '4', 10);
INSERT  INTO MEMBERS VALUES(MEMBERS_SEQ.NEXTVAL, 'Bridget', 'Stanley', 'SI 234', '317-274-5678', '1', '1', 12);
INSERT  INTO MEMBERS VALUES(MEMBERS_SEQ.NEXTVAL, 'Bradley', 'Wilson', '334 Statford Hall', '765-258-2567', '3', '2', 10);

-- FEEDING PRICES
INSERT  INTO PRICES VALUES(PRICES_SEQ.NEXTVAL, 'Beer/Wine', 5.50);
INSERT  INTO PRICES VALUES(PRICES_SEQ.NEXTVAL, 'Dessert', 2.75);
INSERT  INTO PRICES VALUES(PRICES_SEQ.NEXTVAL, 'Dinner', 15.50);
INSERT  INTO PRICES VALUES(PRICES_SEQ.NEXTVAL, 'Soft Drink', 2.50);
INSERT  INTO PRICES VALUES(PRICES_SEQ.NEXTVAL, 'Lunch', 7.25);

-- FEEDING FOOD_ITEMS
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Lager', 1);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Red Wine', 1);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'White Wine', 1);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Coke', 4);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Coffee', 4);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Chicken a la King', 3);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Rib Steak', 3);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Fish and Chips', 3);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Veggie Delight', 3);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Chocolate Mousse', 2);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Carrot Cake', 2);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Fruit Cup', 2);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Fish and Chips', 5);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Angus Beef Burger', 5);
INSERT  INTO FOOD_ITEMS VALUES(FOOD_ITEMS_SEQ.NEXTVAL, 'Cobb Salad', 5);

-- FEEDING ORDERS
INSERT  INTO ORDERS VALUES(ORDERS_SEQ.NEXTVAL, 9, 'March 5, 2005');
INSERT  INTO ORDERS VALUES(ORDERS_SEQ.NEXTVAL, 8, 'March 5, 2005');
INSERT  INTO ORDERS VALUES(ORDERS_SEQ.NEXTVAL, 7, 'March 5, 2005');
INSERT  INTO ORDERS VALUES(ORDERS_SEQ.NEXTVAL, 6, 'March 7, 2005');
INSERT  INTO ORDERS VALUES(ORDERS_SEQ.NEXTVAL, 5, 'March 7, 2005');
INSERT  INTO ORDERS VALUES(ORDERS_SEQ.NEXTVAL, 4, 'March 10, 2005');
INSERT  INTO ORDERS VALUES(ORDERS_SEQ.NEXTVAL, 3, 'March 5, 2005');
INSERT  INTO ORDERS VALUES(ORDERS_SEQ.NEXTVAL, 2, 'March 6, 2005');
INSERT  INTO ORDERS VALUES(ORDERS_SEQ.NEXTVAL, 1, 'March 7, 2005');

-- FEEDING ORDER_LINE
INSERT  INTO ORDER_LINE VALUES(1,10001,1);
INSERT  INTO ORDER_LINE VALUES(1,10006,1);
INSERT  INTO ORDER_LINE VALUES(1,10012,1);

INSERT  INTO ORDER_LINE VALUES(2,10004,2);
INSERT  INTO ORDER_LINE VALUES(2,10013,1);
INSERT  INTO ORDER_LINE VALUES(2,10014,1);

INSERT  INTO ORDER_LINE VALUES(3,10005,1);
INSERT  INTO ORDER_LINE VALUES(3,10011,1);

INSERT  INTO ORDER_LINE VALUES(4,10005,2);
INSERT  INTO ORDER_LINE VALUES(4,10004,2);
INSERT  INTO ORDER_LINE VALUES(4,10006,1);
INSERT  INTO ORDER_LINE VALUES(4,10007,1);
INSERT  INTO ORDER_LINE VALUES(4,10010,2);

INSERT  INTO ORDER_LINE VALUES(5,10003,1);

INSERT  INTO ORDER_LINE VALUES(6,10002,2);

INSERT  INTO ORDER_LINE VALUES(7,10005,2);

INSERT  INTO ORDER_LINE VALUES(8,10005,1);
INSERT  INTO ORDER_LINE VALUES(8,10011,1);

INSERT  INTO ORDER_LINE VALUES(9,10001,1);

-- ------------------------------------------------------------------------------
-- Task 3 Write queries to [...]
-- 3.1 List all constraints in the database
--
-- ------------------------------------------------------------------------------
SELECT  *
FROM    USER_CONSTRAINTS;

-- ------------------------------------------------------------------------------
-- Task 3 Write queries to [...]
-- 3.2 List all table names in the database
--
-- ------------------------------------------------------------------------------
SELECT  TABLE_NAME
FROM    USER_TABLES;

-- Specify the owner's name to filter tables (apply to others)
-- SELECT TABLE_NAME
-- FROM ALL_TABLES 
-- WHERE OWNER = 'SCHEMA_NAME';

-- ------------------------------------------------------------------------------
-- Task 3 Write queries to [...]
-- 3.3 List all sequences in the database
--
-- ------------------------------------------------------------------------------
SELECT  SEQUENCE_NAME
FROM    USER_SEQUENCES;

-- ------------------------------------------------------------------------------
-- Task 3 Write queries to [...]
-- 3.4 List all members by their first name, last name, position, campus name,
--     monthly dues in descending order by campus name, then ascending order by
--     last name.
-- ------------------------------------------------------------------------------
SELECT  FIRST_NAME, 
        LAST_NAME, 
        POSITION, 
        CAMPUS_NAME,  
        ROUND(YEARLY_MEMBERSHIP_FEE / 12, 2) AS MONTHLY_DUES
FROM MEMBERS
    JOIN POSITION USING(POSITION_ID)
    JOIN CAMPUS USING(CAMPUS_ID)
ORDER BY CAMPUS_NAME DESC, LAST_NAME ASC;
